?as.double
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::find_rtools()
library(devtools)
install_github("cjgeyer/foo")
install.packages("C:/Users/Simon.Poeschl/Desktop/", repos = NULL, type = "source")
install.packages("C:/Users/Simon.Poeschl/Desktop/foo-master/", repos = NULL, type = "source")
install.packages("C:/Users/Simon.Poeschl/Desktop/foo-master/package/foo/", repos = NULL, type = "source")
library(foo)
?foo
foo(1:5)
foo(1:5)
foo(1:500000000)
foo(1:5)
s <- 1:5
s*s
install.packages("microbenchmark")
library(microbenchmark)
?microbenchmark
squareInR <- function(x) {
return(x*x)
}
squareInR(1:100)
microbenchmark(squareInR(1:100), foo(1:100))
microbenchmark(squareInR(1:1000), foo(1:1000))
microbenchmark(squareInR(1:1000), foo(1:1000))
microbenchmark(squareInR(1:1000), foo(1:1000))
document()
foo
remove.packages("foo")
?foo
??foo
document()
document()
document()
library(foo)
remove.packages("foo")
devtools::document()
library(testFortran)
square(1:5)
library(devtools)
document()
library(testFortran)
square(1:5)
remove.packages("testFortran")
remove.packages("testFortran")
remove.packages("foo")
devtools::document()
library(testFortran)
remove.packages("testFortran")
library(testFortran)
remove.packages("testFortran")
library(testFortran)
devtools::document()
devtools::document()
remove.packages("testFortran")
devtools::document()
devtools::document()
library(testFortran)
library(testFortran)
devtools::document()
devtools::document()
library(testDas)
testDas::square(1:5)
testDas::squareInR(1:5)
devtools::document()
devtools::document()
library(testDas)
library(testDas)
remove.packages("testDas")
library(testDas)
rm(list=ls())
squareInR(1:10)
square(1:10)
library(testDas)
remove.packages("testDas")
library(testDas)
remove.packages("testDas")
devtools::document()
devtools::document()
devtools::document()
library(testDas)
library(testFortran)
square(1:10)
devtools::document()
devtools::document()
library(testFortran)
square(1:10)
library(testFortran)
square(1:10)
library(testFortran)
square(1:10)
remove.packages("testFortran")
devtools::document()
library(testFortran)
square(1:10)
library(testFortran)
library(testFortran)
facto(5)
facto(50)
facto(9)
facto(10)
facto(11)
facto(45)
facto(30)
facto(35)
facto(34)
facto(33)
facto(32)
facto(31)
factorial(5)
factorial(10)
factorial(31)
factorial(35)
factorial(30)
library(testFortran)
facto(5)
facto(5, type = "R")
facto(5, type = "Fortran")
require(microbenchmark)
devtools::document()
devtools::document()
devtools::document()
library(testFortran)
?square
devtools::document()
?square
library(testFortran)
library(testFortran)
devtools::document()
library(testFortran)
library(testFortran)
library(testFortran)
